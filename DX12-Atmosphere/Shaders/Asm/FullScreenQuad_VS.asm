//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbGlobal
// {
//
//   float3 gColor;                     // Offset:    0 Size:    12
//   bool gUVAsColor;                   // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbGlobal                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- vertex.pos.x; v0.y <- vertex.pos.y; v0.z <- vertex.pos.z; 
//   v1.x <- vertex.uv.x; v1.y <- vertex.uv.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.pos.x; o0.y <- <main return value>.pos.y; o0.z <- <main return value>.pos.z; o0.w <- <main return value>.pos.w
//
#line 22 "D:\Code\Atmosphere\DX12-Atmosphere\Testes\Shaders\FullScreenQuad_VS.hlsl"
mov r0.xyz, v0.xyzx  // r0.x <- vsout.pos.x; r0.y <- vsout.pos.y; r0.z <- vsout.pos.z
mov r0.w, l(1.000000)  // r0.w <- vsout.pos.w

#line 23
ine r1.x, l(0, 0, 0, 0), cb0[0].w
if_nz r1.x

#line 25
  mov r1.xyz, cb0[0].xyzx  // r1.x <- vsout.color.x; r1.y <- vsout.color.y; r1.z <- vsout.color.z
  mov r1.w, l(1.000000)  // r1.w <- vsout.color.w

#line 26
else 

#line 29
  mov r1.xy, v1.xyxx  // r1.x <- vsout.color.x; r1.y <- vsout.color.y
  mov r1.zw, l(0,0,0,1.000000)  // r1.z <- vsout.color.z; r1.w <- vsout.color.w

#line 30
endif 

#line 32
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
ret 
// Approximately 13 instruction slots used
